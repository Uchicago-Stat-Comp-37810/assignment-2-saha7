knitr::opts_chunk$set(echo = TRUE)
trueA <- 5 # Here we specify true A
trueB <- 0 # and true B
trueSd <- 10 # and finally true sd
samplesize <- 31 # and the sample size
metroh<-read.csv('http://uchicago-stat-comp-37810.github.io/webpage/lectures/lecture5_data.csv')
x <- (-(samplesize-1)/2):((samplesize-1)/2)
# create dependent values according to ax+b+N(0, sd)
y <- trueA*x+trueB+rnorm(n=samplesize, mean=0, sd=trueSd)
x
likelihood <- function(param){
a=param[1]
b=param[2]
sd=param[3]
pred=a*x+b
singlelikelihoods = dnorm(y, mean = pred, sd=sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))} # This function yields the
slopevalues(5)
slopelikelihoods <- lapply(seq(3,7,by=.05), slopevalues)
slopelikelihoods
slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))} # This function yields the sum of likelihoods when the parameter for slope is a, and the other parameters are set as above.
slopelikelihoods <- lapply(seq(3,7,by=.05), slopevalues) # slopelikelihoods has the sum of likelihoods of slope from 3 to 7 by 0.05 as list format.
plot(seq(3,7,by=.05), slopelikelihoods, type="l", xlab="values of slope parameter a", ylab = "Log likelihood") # This draws a plot with horizontal axis with 3 to 7 by 0.05 with its sum of likelihoods respectively. That is, this gives the graph of sum of likelihoods of slope as the slope changes from 3 to 7.
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dnorm(b, sd = 5, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
# Next, the posterior function adds the sum of loglikelihoods of y and log(prior density) of 3 parameters.
posterior <- function(param){
return(likelihood(param)+prior(param))
}
proposalfunction <- function(param){
return(rnorm(3, mean = param, sd=c(0.1, 0.5, 0.3)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
# Here, we set up the startvalue and iterations as below:
startvalue = c(4,0,10)
chain=run_metropolis_MCMC(startvalue, 10000)
burnIn=5000 # we also set burnIn so that we discard the values that maybe influenced by the initial value.
acceptance=1-mean(duplicated(chain[-(1:burnIn),]))
duplicated(chain[-(1:burnIn),]))
duplicated(chain[-(1:burnIn),])
mean(duplicated(chain[-(1:burnIn),]))
mean(unique(chain[-(1:burnIn),]))
unique(chain[-(1:burnIn),])
